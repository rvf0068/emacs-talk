#+title: Org-babel examples

#+latex_header: \usepackage{listings}

* Python

** Basic Python

*** Fibonacci

    This is an example of a Python source block.

    #+begin_src python
x=[1,1]
for i in range(8):
    x.append(x[i]+x[i+1])
return x
    #+end_src

*** Fibonacci 2

    #+begin_src python
def fib(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fib(n-1)+fib(n-2)

return [fib(n) for n in range(10)]
    #+end_src


** Matplotlib

*** From the documentation

    #+begin_src python :results file
import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0.0, 2.0, 0.01)
s = 1 + np.sin(np.pi*t)

plt.xlabel('time (s)')
plt.ylabel('voltage (mV)')
plt.title('About as simple as it gets, folks')
plt.grid(True)
plt.plot(t, s)
plt.savefig('matplotlib-ex1.png')
return 'matplotlib-ex1.png'
    #+end_src

*** Another

    #+begin_src python :results file
import numpy as np
import matplotlib.pyplot as plt


r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r

ax = plt.subplot(111, projection='polar')
ax.plot(theta, r)
ax.set_rmax(2)
ax.set_rticks([0.5, 1, 1.5, 2])  # less radial ticks
ax.set_rlabel_position(-22.5)  # get radial labels away from plotted line
ax.grid(True)

ax.set_title("A line plot on a polar axis", va='bottom')
plt.savefig('matplotlib-ex2.png')
return 'matplotlib-ex2.png'
    #+end_src

*** Fibonacci 3. Variables between code blocks

    #+name: fibonacci
    #+begin_src ruby
def fibo(n)
  n <= 2 ? 1 : fibo(n-1) + fibo(n-2)
end

p (1..10).map{|x| fibo(x)}
    #+end_src

    #+begin_src python :var vals=fibonacci :results file
import matplotlib.pyplot as plt

plt.plot(vals)
plt.savefig('matplotlib-ex3.png')
return 'matplotlib-ex3.png'
    #+end_src


** Sympy

*** Session

    #+begin_src python :session
import sympy as sym
    #+end_src

    #+begin_src python :session 
x = sym.symbols('x')
sym.diff(sym.sin(x)*sym.exp(x), x)
    #+end_src

*** Calling a block

    #+name: quadratic
    #+begin_src python :session :results raw :var a=1 b=2 c=1
import sympy as sym
x = sym.symbols('x')

sym.solve(a*x**2 + b*x + c, x)
    #+end_src

    #+call: quadratic(a=1, b=2, c=2)

* Sage

  This uses =ob-sagemath=. From the /Sage Tutorial/.

  #+begin_src sage
A = matrix(4,4,range(16))
factor(A.charpoly())
  #+end_src

  #+begin_src sage
var('x y p q')
eq1 = p+q==9
eq2 = q*y+p*x==-6
eq3 = q*y^2+p*x^2==24
solve([eq1,eq2,eq3,p==1],p,q,x,y)
  #+end_src

  #+begin_src sage :results file
x = var('x')
p1 = parametric_plot((cos(x),sin(x)),(x,0,2*pi),rgbcolor=hue(0.2))
p2 = parametric_plot((cos(x),sin(x)^2),(x,0,2*pi),rgbcolor=hue(0.4))
p3 = parametric_plot((cos(x),sin(x)^3),(x,0,2*pi),rgbcolor=hue(0.6))
show(p1+p2+p3, axes=false)
  #+end_src

* COMMENT Local Variables

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
